---
title: "RPS Hackathon @ Recurse: Guide to Building a Bot"
bread-crumbs: false
format:
  html:
    math: true
---


## Game Theory Equilibrium

start with GTO then exploit

RPS is a zero-sum game and the payouts are symmetrical as follows: 

| Player 1/2 | Rock    | Paper   | Scissors |
|--------|---------|---------|----------|
| Rock   | (0, 0)  | (-1, 1) | (1, -1)  |
| Paper  | (1, -1) | (0, 0)  | (-1, 1)  |
|Scissors| (-1, 1) | (1, -1) | (0, 0)   |

The Nash Equilibrium strategy is to play each action $r = p = s = 1/3$ of the time. 

:::{.callout-tip collapse="true" appearance="minimal"}
## Nash Equilibrium Strategy for RPS
If Player 1 plays Rock with probability $r$, Paper with probability $p$, and Scissors with probability $s$, we have the following expected value equations for Player 2: 

$\mathbb{E}(\text{R}) = -1p + 1s$

$\mathbb{E}(\text{P}) = 1r - 1s$

$\mathbb{E}(\text{S}) = -1r + 1p$

Since no action dominates, we know that the EV of every strategic action should be equal  (since if a certain strategy was best, we'd want to always play that strategy). 

To solve for $r$, $p$, and $s$, we can start by setting these EVs equal: 

$\mathbb{E}(\text{R}) = \mathbb{E}(\text{P})$

$-1p + 1s = 1r - 1s$

$2s = p + r$

Then setting these equal: 

$\mathbb{E}(\text{R}) = \mathbb{E}(\text{S})$

$-1p + 1s = -1r + 1p$

$s + r = 2p$

And finally setting these equal: 

$\mathbb{E}(\text{P}) = \mathbb{E}(\text{S})$

$1r - 1s = -1r + 1p$

$2r = s + p$

Now we have these equations:  

$$
\begin{cases}
2s = p + r \\
s + r = 2p \\
2r = s + p
\end{cases}
$$

We can rewrite the 1st: 

$r = 2s - p$

And combine with the 2nd: 

$s + (2s - p) = 2p$

$3s = 3p$

Resulting in: 

$s = p$

Now we can go back to the 2nd equation: 

$s + r = 2p$

And insert $s$ = $p$: 

$s + r = 2s$

And arrive at: 

$r = s$

We now see that all are equal: 

$s = p = r$

We also know that they must all sum to $1$: 

$r + p + s = 1$

Since they're all equal and sum to $1$, we can substitute $p$ and $s$ with $r$: 

$3r = 1$

$r = 1/3$

So all actions are taken with probability $1/3$: 

$r = p = s = 1/3 \quad \blacksquare$
:::

Playing this strategy means that whatever your opponent does, you will breakeven! For example, think about an opponent that always plays Rock. 

$$
\begin{equation}
\begin{split}
\mathbb{E}(\text{Equilibrium vs. Rock}) &= r*0 + p*1 + s*-1 \\
&= 1/3*0 + 1/3*1 + 1/3*-1 \\
&= 0
\end{split}
\end{equation}
$$

## Submitting Bots
To get started, click the [Login](https://poker.camp/login/) button to the left and then go to [Submit Your Bot](https://poker.camp/rps-recurse/botsubmit.html). On the bot submission page, it's possible to submit with: 

- Code text boxes directly on the webpage
- File upload a single `player.py` Python file 

## Game Engine

If you would like to clone the repository with the game engine, you can find it at [https://github.com/pokercamp/rps-engine](https://github.com/pokercamp/rps-engine). 

In `players/default`, the `player.py` file is where you write your bot. We don't recommend changing any other files. 

The engine is in `engine.py`. You can use `engine.py` to run two bots against each other. You can use this to test your bot against itself or other bots that you create. 

The following code will run `n_games` between `p1_name` and `p2_name` and output the result to the specified `output_dir`. 

The generic usage is: 
```python
python3 engine.py -p1 {p1_name} {p1_file_path} -p2 {p2_name} {p2_file_path} -o {output_dir} -n {n_games}"
```

For example, to run a 200 game match with two bots that are named `p1` and `p2` with files in the `players/default/` folder and outputted to the `p1p2test` folder, do this: 

```python
python3 engine.py -p1 'p1' players/default/ -p2 'p2' players/default/ -o p1p2test -n 200
```

The output files are in the folder `p1p2test`: 

1. `scores.p1.p2.txt` contains the raw scores of each player

2. The `p1.p2` folder contains: 

  - `gamelog.txt`: A log of all hands played

  - Other log files for each player 